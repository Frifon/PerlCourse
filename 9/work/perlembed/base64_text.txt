VGhlIGdsdWUgY29kZSBwdWxscyB0aGUgYXJndW1lbnRzIGZyb20gdGhlIFBlcmwgc3RhY2ssIGNvbnZlcnRzIHRoZXNlIFBlcmwgdmFsdWVzIHRvIHRoZSBmb3JtYXRzIGV4cGVjdGVkIGJ5IGEgQyBmdW5jdGlvbiwgY2FsbCB0aGlzIEMgZnVuY3Rpb24sIHRyYW5zZmVycyB0aGUgcmV0dXJuIHZhbHVlcyBvZiB0aGUgQyBmdW5jdGlvbiBiYWNrIHRvIFBlcmwuIFJldHVybiB2YWx1ZXMgaGVyZSBtYXkgYmUgYSBjb252ZW50aW9uYWwgQyByZXR1cm4gdmFsdWUgb3IgYW55IEMgZnVuY3Rpb24gYXJndW1lbnRzIHRoYXQgbWF5IHNlcnZlIGFzIG91dHB1dCBwYXJhbWV0ZXJzLiBUaGVzZSByZXR1cm4gdmFsdWVzIG1heSBiZSBwYXNzZWQgYmFjayB0byBQZXJsIGVpdGhlciBieSBwdXR0aW5nIHRoZW0gb24gdGhlIFBlcmwgc3RhY2ssIG9yIGJ5IG1vZGlmeWluZyB0aGUgYXJndW1lbnRzIHN1cHBsaWVkIGZyb20gdGhlIFBlcmwgc2lkZS4KVGhlIGFib3ZlIGlzIGEgc29tZXdoYXQgc2ltcGxpZmllZCB2aWV3IG9mIHdoYXQgcmVhbGx5IGhhcHBlbnMuIFNpbmNlIFBlcmwgYWxsb3dzIG1vcmUgZmxleGlibGUgY2FsbGluZyBjb252ZW50aW9ucyB0aGFuIEMsIFhTVUJzIG1heSBkbyBtdWNoIG1vcmUgaW4gcHJhY3RpY2UsIHN1Y2ggYXMgY2hlY2tpbmcgaW5wdXQgcGFyYW1ldGVycyBmb3IgdmFsaWRpdHksIHRocm93aW5nIGV4Y2VwdGlvbnMgKG9yIHJldHVybmluZyB1bmRlZi9lbXB0eSBsaXN0KSBpZiB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIEMgZnVuY3Rpb24gaW5kaWNhdGVzIGZhaWx1cmUsIGNhbGxpbmcgZGlmZmVyZW50IEMgZnVuY3Rpb25zIGJhc2VkIG9uIG51bWJlcnMgYW5kIHR5cGVzIG9mIHRoZSBhcmd1bWVudHMsIHByb3ZpZGluZyBhbiBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlLCBldGMuCk9mIGNvdXJzZSwgb25lIGNvdWxkIHdyaXRlIHN1Y2ggZ2x1ZSBjb2RlIGRpcmVjdGx5IGluIEMuIEhvd2V2ZXIsIHRoaXMgd291bGQgYmUgYSB0ZWRpb3VzIHRhc2ssIGVzcGVjaWFsbHkgaWYgb25lIG5lZWRzIHRvIHdyaXRlIGdsdWUgZm9yIG11bHRpcGxlIEMgZnVuY3Rpb25zLCBhbmQvb3Igb25lIGlzIG5vdCBmYW1pbGlhciBlbm91Z2ggd2l0aCB0aGUgUGVybCBzdGFjayBkaXNjaXBsaW5lIGFuZCBvdGhlciBzdWNoIGFyY2FuYS4gWFMgY29tZXMgdG8gdGhlIHJlc2N1ZSBoZXJlOiBpbnN0ZWFkIG9mIHdyaXRpbmcgdGhpcyBnbHVlIEMgY29kZSBpbiBsb25nLWhhbmQsIG9uZSBjYW4gd3JpdGUgYSBtb3JlIGNvbmNpc2Ugc2hvcnQtaGFuZCBkZXNjcmlwdGlvbiBvZiB3aGF0IHNob3VsZCBiZSBkb25lIGJ5IHRoZSBnbHVlLCBhbmQgbGV0IHRoZSBYUyBjb21waWxlciB4c3VicHAgaGFuZGxlIHRoZSByZXN0LgpUaGUgWFMgbGFuZ3VhZ2UgYWxsb3dzIG9uZSB0byBkZXNjcmliZSB0aGUgbWFwcGluZyBiZXR3ZWVuIGhvdyB0aGUgQyByb3V0aW5lIGlzIHVzZWQsIGFuZCBob3cgdGhlIGNvcnJlc3BvbmRpbmcgUGVybCByb3V0aW5lIGlzIHVzZWQuIEl0IGFsc28gYWxsb3dzIGNyZWF0aW9uIG9mIFBlcmwgcm91dGluZXMgd2hpY2ggYXJlIGRpcmVjdGx5IHRyYW5zbGF0ZWQgdG8gQyBjb2RlIGFuZCB3aGljaCBhcmUgbm90IHJlbGF0ZWQgdG8gYSBwcmUtZXhpc3RpbmcgQyBmdW5jdGlvbi4gSW4gY2FzZXMgd2hlbiB0aGUgQyBpbnRlcmZhY2UgY29pbmNpZGVzIHdpdGggdGhlIFBlcmwgaW50ZXJmYWNlLCB0aGUgWFNVQiBkZWNsYXJhdGlvbiBpcyBhbG1vc3QgaWRlbnRpY2FsIHRvIGEgZGVjbGFyYXRpb24gb2YgYSBDIGZ1bmN0aW9uIChpbiBLJlIgc3R5bGUpLiBJbiBzdWNoIGNpcmN1bXN0YW5jZXMsIHRoZXJlIGlzIGFub3RoZXIgdG9vbCBjYWxsZWQgaDJ4cyB0aGF0IGlzIGFibGUgdG8gdHJhbnNsYXRlIGFuIGVudGlyZSBDIGhlYWRlciBmaWxlIGludG8gYSBjb3JyZXNwb25kaW5nIFhTIGZpbGUgdGhhdCB3aWxsIHByb3ZpZGUgZ2x1ZSB0byB0aGUgZnVuY3Rpb25zL21hY3JvcyBkZXNjcmliZWQgaW4gdGhlIGhlYWRlciBmaWxlLgpUaGUgWFMgY29tcGlsZXIgaXMgY2FsbGVkIHhzdWJwcC4gVGhpcyBjb21waWxlciBjcmVhdGVzIHRoZSBjb25zdHJ1Y3RzIG5lY2Vzc2FyeSB0byBsZXQgYW4gWFNVQiBtYW5pcHVsYXRlIFBlcmwgdmFsdWVzLCBhbmQgY3JlYXRlcyB0aGUgZ2x1ZSBuZWNlc3NhcnkgdG8gbGV0IFBlcmwgY2FsbCB0aGUgWFNVQi4gVGhlIGNvbXBpbGVyIHVzZXMgdHlwZW1hcHMgdG8gZGV0ZXJtaW5lIGhvdyB0byBtYXAgQyBmdW5jdGlvbiBwYXJhbWV0ZXJzIGFuZCBvdXRwdXQgdmFsdWVzIHRvIFBlcmwgdmFsdWVzIGFuZCBiYWNrLiBUaGUgZGVmYXVsdCB0eXBlbWFwICh3aGljaCBjb21lcyB3aXRoIFBlcmwpIGhhbmRsZXMgbWFueSBjb21tb24gQyB0eXBlcy4gQSBzdXBwbGVtZW50YXJ5IHR5cGVtYXAgbWF5IGFsc28gYmUgbmVlZGVkIHRvIGhhbmRsZSBhbnkgc3BlY2lhbCBzdHJ1Y3R1cmVzIGFuZCB0eXBlcyBmb3IgdGhlIGxpYnJhcnkgYmVpbmcgbGlua2VkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0eXBlbWFwcywgc2VlIHBlcmx4c3R5cGVtYXAu

The glue code pulls the arguments from the Perl stack, converts these Perl values to the formats expected by a C function, call this C function, transfers the return values of the C function back to Perl. Return values here may be a conventional C return value or any C function arguments that may serve as output parameters. These return values may be passed back to Perl either by putting them on the Perl stack, or by modifying the arguments supplied from the Perl side.
The above is a somewhat simplified view of what really happens. Since Perl allows more flexible calling conventions than C, XSUBs may do much more in practice, such as checking input parameters for validity, throwing exceptions (or returning undef/empty list) if the return value from the C function indicates failure, calling different C functions based on numbers and types of the arguments, providing an object-oriented interface, etc.
Of course, one could write such glue code directly in C. However, this would be a tedious task, especially if one needs to write glue for multiple C functions, and/or one is not familiar enough with the Perl stack discipline and other such arcana. XS comes to the rescue here: instead of writing this glue C code in long-hand, one can write a more concise short-hand description of what should be done by the glue, and let the XS compiler xsubpp handle the rest.
The XS language allows one to describe the mapping between how the C routine is used, and how the corresponding Perl routine is used. It also allows creation of Perl routines which are directly translated to C code and which are not related to a pre-existing C function. In cases when the C interface coincides with the Perl interface, the XSUB declaration is almost identical to a declaration of a C function (in K&R style). In such circumstances, there is another tool called h2xs that is able to translate an entire C header file into a corresponding XS file that will provide glue to the functions/macros described in the header file.
The XS compiler is called xsubpp. This compiler creates the constructs necessary to let an XSUB manipulate Perl values, and creates the glue necessary to let Perl call the XSUB. The compiler uses typemaps to determine how to map C function parameters and output values to Perl values and back. The default typemap (which comes with Perl) handles many common C types. A supplementary typemap may also be needed to handle any special structures and types for the library being linked. For more information on typemaps, see perlxstypemap.